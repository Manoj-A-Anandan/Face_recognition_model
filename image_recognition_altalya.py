# -*- coding: utf-8 -*-
"""Image recognition Altalya.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J8pgSBVopsGyiJHG2O1hAo9sGEuKRpnG

# **Less Images**
"""

!pip install face_recognition

import cv2
import numpy as np
import os
import face_recognition
from google.colab import drive
import matplotlib.pyplot as plt

# Mount Google Drive
drive.mount('/content/drive')

def load_images_from_folder(folder):
    images = []
    for filename in os.listdir(folder):
        img_path = os.path.join(folder, filename)
        img = cv2.imread(img_path)
        if img is not None:
            images.append((img, filename))
    return images

def encode_faces(images):
    encodings = []
    for img, filename in images:
        rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        boxes = face_recognition.face_locations(rgb_img, model='cnn')  # Using 'cnn' model for better accuracy
        encodings.append((face_recognition.face_encodings(rgb_img, boxes), filename))
    return encodings

def find_matching_images(query_image_path, image_folder, tolerance=0.4):  # Adjust tolerance for accuracy
    query_image = cv2.imread(query_image_path)
    query_rgb = cv2.cvtColor(query_image, cv2.COLOR_BGR2RGB)
    query_boxes = face_recognition.face_locations(query_rgb, model='cnn')
    query_encoding = face_recognition.face_encodings(query_rgb, query_boxes)[0]

    images = load_images_from_folder(image_folder)
    encodings = encode_faces(images)

    matching_images = []

    for face_encodings, filename in encodings:
        for face_encoding in face_encodings:
            match = face_recognition.compare_faces([query_encoding], face_encoding, tolerance=tolerance)
            if match[0]:
                matching_images.append((filename, face_encoding))

    return matching_images

def display_matching_images(matching_images, image_folder):
    for filename, _ in matching_images:
        img_path = os.path.join(image_folder, filename)
        img = cv2.imread(img_path)
        rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        plt.imshow(rgb_img)
        plt.title(filename)
        plt.axis('off')
        plt.show()

# Example usage
query_image_path = "/content/drive/MyDrive/Data/imgs/1719474511080.jpg"
image_folder = "/content/drive/MyDrive/Data/imgs"

matching_images = find_matching_images(query_image_path, image_folder, tolerance=0.4)  # Adjust tolerance for accuracy
print("Matching images:", [filename for filename, _ in matching_images])

# Display the matching images
display_matching_images(matching_images, image_folder)

print(len(matching_images))

"""# **Medium Images**"""

pip install face_recognition opencv-python numpy

#More Accuracy

import cv2
import numpy as np
import os
import face_recognition
from google.colab import drive
import matplotlib.pyplot as plt

# Mount Google Drive
drive.mount('/content/drive')

def load_images_from_folder(folder):
    images = []
    for filename in os.listdir(folder):
        img_path = os.path.join(folder, filename)
        img = cv2.imread(img_path)
        if img is not None:
            images.append((img, filename))
    return images

def encode_faces(images):
    encodings = []
    for img, filename in images:
        rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        boxes = face_recognition.face_locations(rgb_img, model='cnn')  # Using 'cnn' model for better accuracy
        encodings.append((face_recognition.face_encodings(rgb_img, boxes), filename))
    return encodings

def find_matching_images(query_image_path, image_folder, tolerance=0.4):  # Adjust tolerance for accuracy
    query_image = cv2.imread(query_image_path)
    query_rgb = cv2.cvtColor(query_image, cv2.COLOR_BGR2RGB)
    query_boxes = face_recognition.face_locations(query_rgb, model='cnn')
    query_encoding = face_recognition.face_encodings(query_rgb, query_boxes)[0]

    images = load_images_from_folder(image_folder)
    encodings = encode_faces(images)

    matching_images = []

    for face_encodings, filename in encodings:
        for face_encoding in face_encodings:
            match = face_recognition.compare_faces([query_encoding], face_encoding, tolerance=tolerance)
            if match[0]:
                matching_images.append((filename, face_encoding))

    return matching_images

def display_matching_images(matching_images, image_folder):
    for filename, _ in matching_images:
        img_path = os.path.join(image_folder, filename)
        img = cv2.imread(img_path)
        rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        plt.imshow(rgb_img)
        plt.title(filename)
        plt.axis('off')
        plt.show()

def save_matching_images(matching_images, image_folder, save_folder):
    if not os.path.exists(save_folder):
        os.makedirs(save_folder)

    for filename, _ in matching_images:
        img_path = os.path.join(image_folder, filename)
        img = cv2.imread(img_path)
        save_path = os.path.join(save_folder, filename)
        cv2.imwrite(save_path, img)
        #print(f"Saved {filename} to {save_folder}")

# Example usage
query_image_path = "/content/drive/MyDrive/Data/imgs/1719474511050.jpg" #Enter the query image that you want to extract from the large source
image_folder = "/content/drive/MyDrive/Data/imgs"

matching_images = find_matching_images(query_image_path, image_folder, tolerance=0.4)  # Adjust tolerance for accuracy
print("Matching images:", [filename for filename, _ in matching_images])

# Display the matching images
display_matching_images(matching_images, image_folder)

save_folder = input("Enter the name of the folder to save the matched images: ")
save_folder_path = os.path.join("/content/drive/MyDrive/Data", save_folder)

# Save the matched images
save_matching_images(matching_images, image_folder, save_folder_path)
print("Folder Created!ðŸ˜‰")

"""# **All Images**"""

import cv2
import numpy as np
import os
import face_recognition
from google.colab import drive
import matplotlib.pyplot as plt

# Mount Google Drive
drive.mount('/content/drive')

def load_images_from_folder(folder):
    images = []
    for filename in os.listdir(folder):
        img_path = os.path.join(folder, filename)
        img = cv2.imread(img_path)
        if img is not None:
            images.append((img, filename))
    return images

def encode_faces(images):
    encodings = []
    for img, filename in images:
        rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        boxes = face_recognition.face_locations(rgb_img, model='hog')  # Using 'hog' model for faster processing
        if boxes:  # Check if faces are detected
            encodings.append((face_recognition.face_encodings(rgb_img, boxes), filename))
    return encodings

def find_matching_images(query_image_path, image_folder, tolerance=0.6):  # Increased tolerance for less strict matching
    query_image = cv2.imread(query_image_path)
    query_rgb = cv2.cvtColor(query_image, cv2.COLOR_BGR2RGB)
    query_boxes = face_recognition.face_locations(query_rgb, model='hog')
    if not query_boxes:
        print("No face found in the query image.")
        return []
    query_encoding = face_recognition.face_encodings(query_rgb, query_boxes)[0]

    images = load_images_from_folder(image_folder)
    encodings = encode_faces(images)

    matching_images = []

    for face_encodings, filename in encodings:
        for face_encoding in face_encodings:
            match = face_recognition.compare_faces([query_encoding], face_encoding, tolerance=tolerance)
            if match[0]:
                matching_images.append((filename, face_encoding))

    return matching_images

def display_matching_images(matching_images, image_folder):
    for filename, _ in matching_images:
        img_path = os.path.join(image_folder, filename)
        img = cv2.imread(img_path)
        rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        plt.imshow(rgb_img)
        plt.title(filename)
        plt.axis('off')
        plt.show()

def save_matching_images(matching_images, image_folder, save_folder):
    if not os.path.exists(save_folder):
        os.makedirs(save_folder)

    for filename, _ in matching_images:
        img_path = os.path.join(image_folder, filename)
        img = cv2.imread(img_path)
        save_path = os.path.join(save_folder, filename)
        cv2.imwrite(save_path, img)
        #print(f"Saved {filename} to {save_folder}")

# Example usage
query_image_path = "/content/drive/MyDrive/Data/imgs/1719474511050.jpg"
image_folder = "/content/drive/MyDrive/Data/imgs"

matching_images = find_matching_images(query_image_path, image_folder, tolerance=0.6)  # Increased tolerance for less strict matching
print("Matching images:", [filename for filename, _ in matching_images])

# Display the matching images
display_matching_images(matching_images, image_folder)
save_folder = input("Enter the name of the folder to save the matched images: ")
save_folder_path = os.path.join("/content/drive/MyDrive/Data", save_folder)

# Save the matched images
save_matching_images(matching_images, image_folder, save_folder_path)
print("Folder Created!ðŸ˜‰")